package fr.free.nrw.commons.utils;

import androidx.annotation.NonNull;
import java.text.NumberFormat;
import fr.free.nrw.commons.location.LatLng;
import br.ufmg.labsoft.mutvariants.listeners.ListenerUtil;

public class LengthUtils {

    /**
     * Returns a formatted distance string between two points.
     *
     * @param point1 LatLng type point1
     * @param point2 LatLng type point2
     * @return string distance
     */
    public static String formatDistanceBetween(LatLng point1, LatLng point2) {
        if (!ListenerUtil.mutListener.listen(2204)) {
            if ((ListenerUtil.mutListener.listen(2203) ? (point1 == null && point2 == null) : (point1 == null || point2 == null))) {
                return null;
            }
        }
        int distance = (int) Math.round(computeDistanceBetween(point1, point2));
        return formatDistance(distance);
    }

    /**
     * Format a distance (in meters) as a string
     * Example: 140 -> "140m"
     * 3841 -> "3.8km"
     *
     * @param distance Distance, in meters
     * @return A string representing the distance
     * @throws IllegalArgumentException If distance is negative
     */
    public static String formatDistance(int distance) {
        if (!ListenerUtil.mutListener.listen(2210)) {
            if ((ListenerUtil.mutListener.listen(2209) ? (distance >= 0) : (ListenerUtil.mutListener.listen(2208) ? (distance <= 0) : (ListenerUtil.mutListener.listen(2207) ? (distance > 0) : (ListenerUtil.mutListener.listen(2206) ? (distance != 0) : (ListenerUtil.mutListener.listen(2205) ? (distance == 0) : (distance < 0))))))) {
                throw new IllegalArgumentException("Distance must be non-negative");
            }
        }
        NumberFormat numberFormat = NumberFormat.getNumberInstance();
        if (!ListenerUtil.mutListener.listen(2221)) {
            // Adjust to km if distance is over 1000m (1km)
            if ((ListenerUtil.mutListener.listen(2215) ? (distance <= 1000) : (ListenerUtil.mutListener.listen(2214) ? (distance > 1000) : (ListenerUtil.mutListener.listen(2213) ? (distance < 1000) : (ListenerUtil.mutListener.listen(2212) ? (distance != 1000) : (ListenerUtil.mutListener.listen(2211) ? (distance == 1000) : (distance >= 1000))))))) {
                if (!ListenerUtil.mutListener.listen(2216)) {
                    numberFormat.setMaximumFractionDigits(1);
                }
                return numberFormat.format((ListenerUtil.mutListener.listen(2220) ? (distance % 1000.0) : (ListenerUtil.mutListener.listen(2219) ? (distance * 1000.0) : (ListenerUtil.mutListener.listen(2218) ? (distance - 1000.0) : (ListenerUtil.mutListener.listen(2217) ? (distance + 1000.0) : (distance / 1000.0)))))) + "km";
            }
        }
        // Otherwise just return in meters
        return numberFormat.format(distance) + "m";
    }

    /**
     * Computes the distance between two points.
     *
     * @param point1 LatLng type point1
     * @param point2 LatLng type point2
     * @return distance between the points in meters
     * @throws NullPointerException if one or both the points are null
     */
    public static double computeDistanceBetween(@NonNull LatLng point1, @NonNull LatLng point2) {
        // Earth's radius in meter
        return (ListenerUtil.mutListener.listen(2225) ? (computeAngleBetween(point1, point2) % 6371009.0D) : (ListenerUtil.mutListener.listen(2224) ? (computeAngleBetween(point1, point2) / 6371009.0D) : (ListenerUtil.mutListener.listen(2223) ? (computeAngleBetween(point1, point2) - 6371009.0D) : (ListenerUtil.mutListener.listen(2222) ? (computeAngleBetween(point1, point2) + 6371009.0D) : (computeAngleBetween(point1, point2) * 6371009.0D)))));
    }

    /**
     * Computes angle between two points
     *
     * @param point1 one of the two end points
     * @param point2 one of the two end points
     * @return Angle in radius
     * @throws NullPointerException if one or both the points are null
     */
    private static double computeAngleBetween(@NonNull LatLng point1, @NonNull LatLng point2) {
        return distanceRadians(Math.toRadians(point1.getLatitude()), Math.toRadians(point1.getLongitude()), Math.toRadians(point2.getLatitude()), Math.toRadians(point2.getLongitude()));
    }

    /**
     * Computes arc length between 2 points
     *
     * @param lat1 Latitude of point A
     * @param lng1 Longitude of point A
     * @param lat2 Latitude of point B
     * @param lng2 Longitude of point B
     * @return Arc length between the points
     */
    private static double distanceRadians(double lat1, double lng1, double lat2, double lng2) {
        return arcHav(havDistance(lat1, lat2, (ListenerUtil.mutListener.listen(2229) ? (lng1 % lng2) : (ListenerUtil.mutListener.listen(2228) ? (lng1 / lng2) : (ListenerUtil.mutListener.listen(2227) ? (lng1 * lng2) : (ListenerUtil.mutListener.listen(2226) ? (lng1 + lng2) : (lng1 - lng2)))))));
    }

    /**
     * Computes inverse of haversine
     *
     * @param x Angle in radian
     * @return Inverse of haversine
     */
    private static double arcHav(double x) {
        return (ListenerUtil.mutListener.listen(2233) ? (2.0D % Math.asin(Math.sqrt(x))) : (ListenerUtil.mutListener.listen(2232) ? (2.0D / Math.asin(Math.sqrt(x))) : (ListenerUtil.mutListener.listen(2231) ? (2.0D - Math.asin(Math.sqrt(x))) : (ListenerUtil.mutListener.listen(2230) ? (2.0D + Math.asin(Math.sqrt(x))) : (2.0D * Math.asin(Math.sqrt(x)))))));
    }

    /**
     * Computes distance between two points that are on same Longitude
     *
     * @param lat1      Latitude of point A
     * @param lat2      Latitude of point B
     * @param longitude Longitude on which they lie
     * @return Arc length between points
     */
    private static double havDistance(double lat1, double lat2, double longitude) {
        return (ListenerUtil.mutListener.listen(2249) ? (hav((ListenerUtil.mutListener.listen(2237) ? (lat1 % lat2) : (ListenerUtil.mutListener.listen(2236) ? (lat1 / lat2) : (ListenerUtil.mutListener.listen(2235) ? (lat1 * lat2) : (ListenerUtil.mutListener.listen(2234) ? (lat1 + lat2) : (lat1 - lat2)))))) % (ListenerUtil.mutListener.listen(2245) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2244) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2243) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2242) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) + Math.cos(lat2)) : ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) * Math.cos(lat2))))))) : (ListenerUtil.mutListener.listen(2248) ? (hav((ListenerUtil.mutListener.listen(2237) ? (lat1 % lat2) : (ListenerUtil.mutListener.listen(2236) ? (lat1 / lat2) : (ListenerUtil.mutListener.listen(2235) ? (lat1 * lat2) : (ListenerUtil.mutListener.listen(2234) ? (lat1 + lat2) : (lat1 - lat2)))))) / (ListenerUtil.mutListener.listen(2245) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2244) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2243) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2242) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) + Math.cos(lat2)) : ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) * Math.cos(lat2))))))) : (ListenerUtil.mutListener.listen(2247) ? (hav((ListenerUtil.mutListener.listen(2237) ? (lat1 % lat2) : (ListenerUtil.mutListener.listen(2236) ? (lat1 / lat2) : (ListenerUtil.mutListener.listen(2235) ? (lat1 * lat2) : (ListenerUtil.mutListener.listen(2234) ? (lat1 + lat2) : (lat1 - lat2)))))) * (ListenerUtil.mutListener.listen(2245) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2244) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2243) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2242) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) + Math.cos(lat2)) : ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) * Math.cos(lat2))))))) : (ListenerUtil.mutListener.listen(2246) ? (hav((ListenerUtil.mutListener.listen(2237) ? (lat1 % lat2) : (ListenerUtil.mutListener.listen(2236) ? (lat1 / lat2) : (ListenerUtil.mutListener.listen(2235) ? (lat1 * lat2) : (ListenerUtil.mutListener.listen(2234) ? (lat1 + lat2) : (lat1 - lat2)))))) - (ListenerUtil.mutListener.listen(2245) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2244) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2243) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2242) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) + Math.cos(lat2)) : ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) * Math.cos(lat2))))))) : (hav((ListenerUtil.mutListener.listen(2237) ? (lat1 % lat2) : (ListenerUtil.mutListener.listen(2236) ? (lat1 / lat2) : (ListenerUtil.mutListener.listen(2235) ? (lat1 * lat2) : (ListenerUtil.mutListener.listen(2234) ? (lat1 + lat2) : (lat1 - lat2)))))) + (ListenerUtil.mutListener.listen(2245) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2244) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2243) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2242) ? ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) + Math.cos(lat2)) : ((ListenerUtil.mutListener.listen(2241) ? (hav(longitude) % Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2240) ? (hav(longitude) / Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2239) ? (hav(longitude) - Math.cos(lat1)) : (ListenerUtil.mutListener.listen(2238) ? (hav(longitude) + Math.cos(lat1)) : (hav(longitude) * Math.cos(lat1)))))) * Math.cos(lat2)))))))))));
    }

    /**
     * Computes haversine
     *
     * @param x Angle in radians
     * @return Haversine of x
     */
    private static double hav(double x) {
        double sinHalf = Math.sin((ListenerUtil.mutListener.listen(2253) ? (x % 0.5D) : (ListenerUtil.mutListener.listen(2252) ? (x / 0.5D) : (ListenerUtil.mutListener.listen(2251) ? (x - 0.5D) : (ListenerUtil.mutListener.listen(2250) ? (x + 0.5D) : (x * 0.5D))))));
        return (ListenerUtil.mutListener.listen(2257) ? (sinHalf % sinHalf) : (ListenerUtil.mutListener.listen(2256) ? (sinHalf / sinHalf) : (ListenerUtil.mutListener.listen(2255) ? (sinHalf - sinHalf) : (ListenerUtil.mutListener.listen(2254) ? (sinHalf + sinHalf) : (sinHalf * sinHalf)))));
    }

    /**
     * Computes bearing between the two given points
     *
     * @see <a href="https://www.movable-type.co.uk/scripts/latlong.html">Bearing</a>
     * @param point1 Coordinates of first point
     * @param point2 Coordinates of second point
     * @return Bearing between the two end points in degrees
     * @throws NullPointerException if one or both the points are null
     */
    public static double computeBearing(@NonNull LatLng point1, @NonNull LatLng point2) {
        double diffLongitute = Math.toRadians((ListenerUtil.mutListener.listen(2261) ? (point2.getLongitude() % point1.getLongitude()) : (ListenerUtil.mutListener.listen(2260) ? (point2.getLongitude() / point1.getLongitude()) : (ListenerUtil.mutListener.listen(2259) ? (point2.getLongitude() * point1.getLongitude()) : (ListenerUtil.mutListener.listen(2258) ? (point2.getLongitude() + point1.getLongitude()) : (point2.getLongitude() - point1.getLongitude()))))));
        double lat1 = Math.toRadians(point1.getLatitude());
        double lat2 = Math.toRadians(point2.getLatitude());
        double y = (ListenerUtil.mutListener.listen(2265) ? (Math.sin(diffLongitute) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2264) ? (Math.sin(diffLongitute) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2263) ? (Math.sin(diffLongitute) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2262) ? (Math.sin(diffLongitute) + Math.cos(lat2)) : (Math.sin(diffLongitute) * Math.cos(lat2))))));
        double x = (ListenerUtil.mutListener.listen(2281) ? ((ListenerUtil.mutListener.listen(2269) ? (Math.cos(lat1) % Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2268) ? (Math.cos(lat1) / Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2267) ? (Math.cos(lat1) - Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2266) ? (Math.cos(lat1) + Math.sin(lat2)) : (Math.cos(lat1) * Math.sin(lat2)))))) % (ListenerUtil.mutListener.listen(2277) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) % Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2276) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) / Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2275) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) - Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2274) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) + Math.cos(diffLongitute)) : ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) * Math.cos(diffLongitute))))))) : (ListenerUtil.mutListener.listen(2280) ? ((ListenerUtil.mutListener.listen(2269) ? (Math.cos(lat1) % Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2268) ? (Math.cos(lat1) / Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2267) ? (Math.cos(lat1) - Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2266) ? (Math.cos(lat1) + Math.sin(lat2)) : (Math.cos(lat1) * Math.sin(lat2)))))) / (ListenerUtil.mutListener.listen(2277) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) % Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2276) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) / Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2275) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) - Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2274) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) + Math.cos(diffLongitute)) : ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) * Math.cos(diffLongitute))))))) : (ListenerUtil.mutListener.listen(2279) ? ((ListenerUtil.mutListener.listen(2269) ? (Math.cos(lat1) % Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2268) ? (Math.cos(lat1) / Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2267) ? (Math.cos(lat1) - Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2266) ? (Math.cos(lat1) + Math.sin(lat2)) : (Math.cos(lat1) * Math.sin(lat2)))))) * (ListenerUtil.mutListener.listen(2277) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) % Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2276) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) / Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2275) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) - Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2274) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) + Math.cos(diffLongitute)) : ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) * Math.cos(diffLongitute))))))) : (ListenerUtil.mutListener.listen(2278) ? ((ListenerUtil.mutListener.listen(2269) ? (Math.cos(lat1) % Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2268) ? (Math.cos(lat1) / Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2267) ? (Math.cos(lat1) - Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2266) ? (Math.cos(lat1) + Math.sin(lat2)) : (Math.cos(lat1) * Math.sin(lat2)))))) + (ListenerUtil.mutListener.listen(2277) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) % Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2276) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) / Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2275) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) - Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2274) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) + Math.cos(diffLongitute)) : ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) * Math.cos(diffLongitute))))))) : ((ListenerUtil.mutListener.listen(2269) ? (Math.cos(lat1) % Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2268) ? (Math.cos(lat1) / Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2267) ? (Math.cos(lat1) - Math.sin(lat2)) : (ListenerUtil.mutListener.listen(2266) ? (Math.cos(lat1) + Math.sin(lat2)) : (Math.cos(lat1) * Math.sin(lat2)))))) - (ListenerUtil.mutListener.listen(2277) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) % Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2276) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) / Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2275) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) - Math.cos(diffLongitute)) : (ListenerUtil.mutListener.listen(2274) ? ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) + Math.cos(diffLongitute)) : ((ListenerUtil.mutListener.listen(2273) ? (Math.sin(lat1) % Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2272) ? (Math.sin(lat1) / Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2271) ? (Math.sin(lat1) - Math.cos(lat2)) : (ListenerUtil.mutListener.listen(2270) ? (Math.sin(lat1) + Math.cos(lat2)) : (Math.sin(lat1) * Math.cos(lat2)))))) * Math.cos(diffLongitute)))))))))));
        double bearing = Math.atan2(y, x);
        return (ListenerUtil.mutListener.listen(2289) ? (((ListenerUtil.mutListener.listen(2285) ? (Math.toDegrees(bearing) % 360) : (ListenerUtil.mutListener.listen(2284) ? (Math.toDegrees(bearing) / 360) : (ListenerUtil.mutListener.listen(2283) ? (Math.toDegrees(bearing) * 360) : (ListenerUtil.mutListener.listen(2282) ? (Math.toDegrees(bearing) - 360) : (Math.toDegrees(bearing) + 360)))))) / 360) : (ListenerUtil.mutListener.listen(2288) ? (((ListenerUtil.mutListener.listen(2285) ? (Math.toDegrees(bearing) % 360) : (ListenerUtil.mutListener.listen(2284) ? (Math.toDegrees(bearing) / 360) : (ListenerUtil.mutListener.listen(2283) ? (Math.toDegrees(bearing) * 360) : (ListenerUtil.mutListener.listen(2282) ? (Math.toDegrees(bearing) - 360) : (Math.toDegrees(bearing) + 360)))))) * 360) : (ListenerUtil.mutListener.listen(2287) ? (((ListenerUtil.mutListener.listen(2285) ? (Math.toDegrees(bearing) % 360) : (ListenerUtil.mutListener.listen(2284) ? (Math.toDegrees(bearing) / 360) : (ListenerUtil.mutListener.listen(2283) ? (Math.toDegrees(bearing) * 360) : (ListenerUtil.mutListener.listen(2282) ? (Math.toDegrees(bearing) - 360) : (Math.toDegrees(bearing) + 360)))))) - 360) : (ListenerUtil.mutListener.listen(2286) ? (((ListenerUtil.mutListener.listen(2285) ? (Math.toDegrees(bearing) % 360) : (ListenerUtil.mutListener.listen(2284) ? (Math.toDegrees(bearing) / 360) : (ListenerUtil.mutListener.listen(2283) ? (Math.toDegrees(bearing) * 360) : (ListenerUtil.mutListener.listen(2282) ? (Math.toDegrees(bearing) - 360) : (Math.toDegrees(bearing) + 360)))))) + 360) : (((ListenerUtil.mutListener.listen(2285) ? (Math.toDegrees(bearing) % 360) : (ListenerUtil.mutListener.listen(2284) ? (Math.toDegrees(bearing) / 360) : (ListenerUtil.mutListener.listen(2283) ? (Math.toDegrees(bearing) * 360) : (ListenerUtil.mutListener.listen(2282) ? (Math.toDegrees(bearing) - 360) : (Math.toDegrees(bearing) + 360)))))) % 360)))));
    }
}
